}
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
day_of_year
#now calculate the cusum of the yearly day data to see if Atlanta has gotten hotter and when
total_days<-cusum(yearly_days, mean(yearly_days), sd(yearly_days))
day_of_year[total_days[[2]],3]
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point()
+geom_hline(yintercept = sd(yearly_days))
sd(yearly_days)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() + geom_hline(yintercept = sd(yearly_days))
#create a dataframe of the response to be plotted
td<-data.frame(total_days[[1]])
sd(yearly_days)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() + geom_hline(yintercept = sd(yearly_days))
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point()
+ geom_hline(yintercept = sd(yearly_days),color="blue")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point()
+ geom_hline(aes(yintercept = sd(yearly_days)),color="blue")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() + geom_hline(aes(yintercept = sd(yearly_days)), color="blue")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(label=ifelse(td>sd(yearly_days),as.character(Crime),'')),hjust=0, vjust=0)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(label=ifelse(td>sd(yearly_days),as.character(td),'')),hjust=0, vjust=0)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(label=ifelse(td>sd(yearly_days),as.character(y),'')),hjust=0, vjust=0)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(label=ifelse(td>sd(yearly_days),td,'')),hjust=0, vjust=0)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(label=ifelse(td>sd(yearly_days),as.character.numeric_version(td),'')),hjust=0, vjust=0)
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
labs(y="St",x="Step")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1)) +
labs(y="St",x="Step")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold")) +
labs(y="St",x="Step")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1)) +
labs(y="St",x="Step")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1,hjust=1)) +
labs(y="St",x="Step")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1)) +
labs(y="St",x="Step")
ggplot(data=td,aes(x = as.numeric(row.names(td)), y = td)) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
labs(y="St",x="Step")
yr<-data.frame(temp_data[,1],total_days[[1]])
yr<-data.frame(substr(colnames(temp_data[2:21]),2,5),total_days[[1]])
yr
ggplot(data=yr,aes(x = yr[[1]], y = yr[[2]])) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
labs(y="St",x="Step")
#i do this at the start of every file
rm(list=ls())
set.seed(10)
library(ggplot2)
#read in data file
temp_data<-read.table("data/temps.txt",header = TRUE)
#initial inspection
head(temp_data)
#this function takes in a data set, a C value, and a T value
#and calculates the cusum. It returns the dataframe of running sum
#and the "unofficial end of summer"
cusum<-function(df, mu, sigma){
#mu<-mean(df)
#sigma<-sd(df)
#S1<-mu - df[1] - sigma
S1<-0
calc<-rep(0,length(df))
all<-rep(0,length(df))
day<-0
for(i in 1:length(df)){
x<-df[i]
curr<-S1 + mu - x - sigma
S1<-max(c(0,curr))
calc[i]<-S1
if(S1 > sigma ){
day<-i
break
}
}
return(list(calc,day))
}
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
day_of_year
#now calculate the cusum of the yearly day data to see if Atlanta has gotten hotter and when
total_days<-cusum(yearly_days, mean(yearly_days), sd(yearly_days))
#create a dataframe of the response to be plotted
yr<-data.frame(substr(colnames(temp_data[2:21]),2,5),total_days[[1]])
#plot the data so we can see where it goes above the Threshold
ggplot(data=yr,aes(x = yr[[1]], y = yr[[2]])) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
labs(y="St",x="Year")
#plot the data so we can see where it goes above the Threshold
ggplot(data=yr,aes(x = yr[[1]], y = yr[[2]])) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
geom_text(aes(label=ifelse(yr[[2]]>sd(yearly_days),as.character(yr[[2]]),'')),hjust=0, vjust=0) +
labs(y="St",x="Year")
#plot the data so we can see where it goes above the Threshold
ggplot(data=yr,aes(x = yr[[1]], y = yr[[2]])) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
geom_text(aes(label=ifelse(yr[[2]]>sd(yearly_days),as.character(yr[[2]]),'')),hjust=1, vjust=1) +
labs(y="St",x="Year")
#i do this at the start of every file
rm(list=ls())
set.seed(10)
library(ggplot2)
# read in data
iris_data<-read.table("data/iris_data.txt", header = TRUE)
#initial ispection of data
head(iris_data)
summary(iris_data)
# plot the data for different attributes
ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Sepal.Length, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Width, color= Species)) + geom_point()
k_max<-20
d<-rep(0,k_max)
scaled<-scale(iris_data[,1:4])
scaled
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(iris_data[,1:4],k)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#plot distance vs K
ggplot(data=v, aes(as.numeric(row.names(v)),y = d))+ geom_point() + labs(x="K")
scaled<-scale(iris_data[,1:4])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#plot distance vs K
ggplot(data=v, aes(as.numeric(row.names(v)),y = d))+ geom_point() + labs(x="K")
scaled<-scale(iris_data[,2:5])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#i do this at the start of every file
rm(list=ls())
set.seed(10)
library(ggplot2)
# read in data
iris_data<-read.table("data/iris_data.txt", header = TRUE)
#initial ispection of data
head(iris_data)
summary(iris_data)
# plot the data for different attributes
ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Sepal.Length, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Width, color= Species)) + geom_point()
k_max<-20
d<-rep(0,k_max)
scaled<-scale(iris_data[,2:5])
k_max<-20
d<-rep(0,k_max)
scaled<-scale(iris_data[,1:4])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k, nstart = 20)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#plot distance vs K
ggplot(data=v, aes(as.numeric(row.names(v)),y = d))+ geom_point() + labs(x="K")
#plot distance vs K
ggplot(data=v, aes(x=1:k_max,y = d))+ geom_point() + labs(x="K")
# plot the data for different attributes
ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Sepal.Length, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Width, color= Species)) + geom_point()
scaled<-scale(iris_data)
[,1:4]
scaled<-scale(iris_data[,1:4])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k, nstart = 20)
d[k]<-model$tot.withinss
}
# plot the data for different attributes
ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
scaled<-scale(iris_data[,1:2])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k, nstart = 20)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#plot distance vs K
ggplot(data=v, aes(x=1:k_max,y = d))+ geom_point() + labs(x="K")
scaled<-scale(iris_data[,3:4])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k, nstart = 20)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#plot distance vs K
ggplot(data=v, aes(x=1:k_max,y = d))+ geom_point() + labs(x="K")
# plot the data for different attributes
ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
#after viewing plots, it looks like the most distinct separation is between
#petal length vs petal width. So we can scale the data and only select those
#columns to be used for clustering
scaled<-scale(iris_data[,3:4])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k, nstart = 20)
d[k]<-model$tot.withinss
}
#convert distance vector to a data frame to be plotted
v<-data.frame(vec=d)
#plot distance vs K
ggplot(data=v, aes(x=1:k_max,y = d))+ geom_point() + labs(x="K")
install.packages("gridExtra")
#i do this at the start of every file
rm(list=ls())
set.seed(10)
library(ggplot2)
library(gridExtra)
# read in data
iris_data<-read.table("data/iris_data.txt", header = TRUE)
#initial ispection of data
head(iris_data)
summary(iris_data)
# plot the data for different attributes
p1<-ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
p2<-ggplot(data=iris_data, aes(Sepal.Length, Sepal.Width, color= Species)) + geom_point()
p3<-ggplot(data=iris_data, aes(Petal.Length, Sepal.Length, color= Species)) + geom_point()
p4<-ggplot(data=iris_data, aes(Petal.Width, Sepal.Width, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Width, Sepal.Length, color= Species)) + geom_point()
ggplot(data=iris_data, aes(Petal.Length, Sepal.Width, color= Species)) + geom_point()
grid.arrange(p1,p2,p3,p4,ncol=2)
# plot the data for different attributes
p1<-ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
p2<-ggplot(data=iris_data, aes(Sepal.Length, Sepal.Width, color= Species)) + geom_point()
p3<-ggplot(data=iris_data, aes(Petal.Length, Sepal.Length, color= Species)) + geom_point()
p4<-ggplot(data=iris_data, aes(Petal.Width, Sepal.Width, color= Species)) + geom_point()
p5<-ggplot(data=iris_data, aes(Petal.Width, Sepal.Length, color= Species)) + geom_point()
p6<-ggplot(data=iris_data, aes(Petal.Length, Sepal.Width, color= Species)) + geom_point()
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
knitr::opts_chunk$set(echo = TRUE)
p1<-ggplot(data=iris_data, aes(Petal.Length, Petal.Width, color= Species)) + geom_point()
p2<-ggplot(data=iris_data, aes(Sepal.Length, Sepal.Width, color= Species)) + geom_point()
p3<-ggplot(data=iris_data, aes(Petal.Length, Sepal.Length, color= Species)) + geom_point()
p4<-ggplot(data=iris_data, aes(Petal.Width, Sepal.Width, color= Species)) + geom_point()
p5<-ggplot(data=iris_data, aes(Petal.Width, Sepal.Length, color= Species)) + geom_point()
p6<-ggplot(data=iris_data, aes(Petal.Length, Sepal.Width, color= Species)) + geom_point()
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
k_max<-20
d<-rep(0,k_max)
scaled<-scale(iris_data[,3:4])
#loop over different values of K to get the distance
for(k in 1:k_max){
model<-kmeans(scaled,k, nstart = 20)
d[k]<-model$tot.withinss
}
v<-data.frame(vec=d)
ggplot(data=v, aes(x=1:k_max,y = d))+ geom_point() + labs(x="K")
rm(list=ls())
set.seed(10)
library(outliers)
library(ggplot2)
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
#i do this at the start of every file
rm(list=ls())
set.seed(10)
library(outliers)
library(ggplot2)
#read in data file
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
#initial inspection
head(crime_data)
summary(crime_data)
boxplot(x=crime_data$Crime)
boxplot(x=crime_data$Crime)
rm(list=ls())
set.seed(10)
library(outliers)
library(ggplot2)
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
boxplot(x=crime_data$Crime)
ggplot(data=crime_data,aes(x = as.numeric(row.names(crime_data)), y = Crime)) +
geom_point() + geom_text(aes(label=ifelse(Crime>1500|Crime<500,as.character(Crime),'')),hjust=0, vjust=0) +
labs(x="State_ID")
#using grubbs.test type=10
#tests if data set has 1 outlier statistically different than the other values
o10<-grubbs.test(crime_data$Crime, type = 10)
o10
#using grubbs.test type=11
#check if lowest and highest value are two outliers on opposite tails of sample
o11<-grubbs.test(crime_data$Crime, type = 11)
o11
#i do this at the start of every file
rm(list=ls())
set.seed(10)
library(ggplot2)
#read in data file
temp_data<-read.table("data/temps.txt",header = TRUE)
#initial inspection
head(temp_data)
#this function takes in a data set, a C value, and a T value
#and calculates the cusum. It returns the dataframe of running sum
#and the "unofficial end of summer"
cusum<-function(df, mu, sigma, t){
#mu<-mean(df)
#sigma<-sd(df)
#S1<-mu - df[1] - sigma
S1<-0
calc<-rep(0,length(df))
all<-rep(0,length(df))
day<-0
for(i in 1:length(df)){
x<-df[i]
curr<-S1 + mu - x - sigma
S1<-max(c(0,curr))
calc[i]<-S1
if(S1 > t ){
day<-i
break
}
}
return(list(calc,day))
}
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
day_of_year
#now calculate the cusum of the yearly day data to see if Atlanta has gotten hotter and when
total_days<-cusum(yearly_days, mean(yearly_days), sd(yearly_days))
#now calculate the cusum of the yearly day data to see if Atlanta has gotten hotter and when
total_days<-cusum(yearly_days, mean(yearly_days), sd(yearly_days),sd(yearly_days))
#create a dataframe of the response to be plotted
yr<-data.frame(substr(colnames(temp_data[2:21]),2,5),total_days[[1]])
#plot the data so we can see where it goes above the Threshold
ggplot(data=yr,aes(x = yr[[1]], y = yr[[2]])) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
geom_text(aes(label=ifelse(yr[[2]]>sd(yearly_days),as.character(yr[[2]]),'')),hjust=1, vjust=1) +
labs(y="St",x="Year")
#actual year where there has been change
day_of_year[total_days[[2]],3]
rm(list=ls())
set.seed(10)
library(ggplot2)
temp_data<-read.table("data/temps.txt",header = TRUE)
cusum<-function(df, mu, sigma, t){
S1<-0
calc<-rep(0,length(df))
all<-rep(0,length(df))
day<-0
for(i in 1:length(df)){
x<-df[i]
curr<-S1 + mu - x - sigma
S1<-max(c(0,curr))
calc[i]<-S1
if(S1 > t ){
day<-i
break
}
}
return(list(calc,day))
}
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
day_of_year
total_days<-cusum(yearly_days, mean(yearly_days), sd(yearly_days),sd(yearly_days))
#create a dataframe of the response to be plotted
yr<-data.frame(substr(colnames(temp_data[2:21]),2,5),total_days[[1]])
ggplot(data=yr,aes(x = yr[[1]], y = yr[[2]])) + geom_point() +
geom_hline(aes(yintercept = sd(yearly_days)), color="blue",linetype="dashed") +
geom_text(aes(0,sd(yearly_days),label = "Threshold", vjust = -1, hjust=-1),color="blue") +
geom_text(aes(label=ifelse(yr[[2]]>sd(yearly_days),as.character(yr[[2]]),'')),hjust=1, vjust=1) +
labs(y="St",x="Year")
#actual year where there has been change
day_of_year[total_days[[2]],3]
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
kable(day_of_year, caption="Yearly Temperature Data" )
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
knitr::kable(day_of_year, caption="Yearly Temperature Data" )
#vector to store the number day for the end of summer
#for each year
yearly_days<-rep(0,ncol(temp_data)-1)
for(i in 2:ncol(temp_data)){
year_data<-temp_data[,i]
mu0<-mean(year_data)
sigma0<-sd(year_data)
yr<-cusum(year_data,mu0,sigma0,sigma0)
#storing actual day number
yearly_days[i-1]<-yr[[2]]
}
#create a data frame containing the day number and actual day of the year for all observations
#for the unofficial end of summer
day_of_year<-data.frame(yearly_days,temp_data[yearly_days,1],substr(colnames(temp_data[2:21]),2,5))
knitr::kable(day_of_year, caption="Yearly Temperature Data" )
