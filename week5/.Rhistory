lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_nodes("#titleCast .itemprop span") %>%
html_text()
lego_movie %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(rvest)
WSwinners <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
head(WSwinners)
library(rvest)
library(rvest)
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
head(WSwinners)
WSwinners<-WSwinners[[1]]
print(WSwinners)
head(WSwinners)
WSwinners<-WSwinners[-1,]
head(WSwinners)
print(WSwinners)
###
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[-1,]
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
head(WSwinners)
WSwinners<-WSwinners[-1,]
WSwinners<-WSwinners[[-1,]]
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
WSwinners<-WSwinners[2:3]
head(WSwinners)
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
install.packages("plyr")
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
count(WSwinners,"WINNER")
count(WSwinners,"X2")
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-2,]
head(WSwinners)
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
WSwinners<-WSwinners[-1,]
head(WSwinners)
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-2,]
head(WSwinners)
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,] %>%WSwinners[-1,]
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
WSwinners<-WSwinners[-1,]
head(WSwinners)
clear
View(WSwinners)
View(WSwinners)
setwd("~/schoolwork/IntroToAnalytics/week5")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
set.seed(1)
library(FrF2)
install.packages("frf2")
install.packages("FrF2")
rm(list=ls())
set.seed(1)
library(FrF2)
#list out some features we would like to show in houses
features<-c("Large Yard", "Solar Panels", "Fence", "Attached Garage","Updated Appliances",
"Energy Efficient","On-Suite Bathroom","Finished Basement","Exclusive Neighborhood","Wood Floors")
#easier to read than 1 and -1
lvls<-c("yes","no")
#store results of fractional factorial
exp<-FrF2(16,factor.names = features, default.levels = lvls)
exp
#vector to keep track of all the "yes" properties listed in the experiments above
house_properties<-rep("",nrow(exp))
#loop over all rows, for each yes, add column name to vector
#each row represents a house with the specific features to show
for(i in 1:nrow(exp)){
curr<-""
for(j in 1:ncol(exp)){
if(exp[i,j] == "yes"){
curr<-paste(curr,colnames(exp)[j],sep = " ")
}
}
if(curr==""){
curr<-"None of the above"
}
house_properties[i]<-curr
}
house_properties
install.packages("glmnet")
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = T)
model_stepwise$anova
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get MSE for stepwise regression
mse_sw<-mean(model_stepwise$residuals^2)
#get x and y values for glmnet
xvals<-as.matrix(crime_data_scaled[,-16])
yvals<-as.matrix(crime_data_scaled[,16])
#get training and test set for cross validation
train_ind<-sample(nrow(crime_data_scaled), size=floor(nrow(crime_data_scaled) * .7))
xtrain<-crime_data_scaled[train_ind,]
ytrain<-crime_data_scaled[train_ind,]
xtest<-crime_data_scaled[-train_ind,]
ytest<-crime_data_scaled[-train_ind,]
#create lasso model alpha=1
model_lasso<-glmnet(x=xvals,y=yvals,alpha = 1)
par(mfrow=c(1,2))
plot(model_lasso,xvar = "lambda")
plot(model_lasso, xvar = "norm")
#cross validation of lasso
loss_cv<-cv.glmnet(xtrain, ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#cross validation of lasso
lasso_cv<-cv.glmnet(xtrain, ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#cross validation of lasso
lasso_cv<-cv.glmnet(xtrain, ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get MSE for stepwise regression
mse_sw<-mean(model_stepwise$residuals^2)
#get x and y values for glmnet
xvals<-as.matrix(crime_data_scaled[,-16])
yvals<-as.matrix(crime_data_scaled[,16])
#get training and test set for cross validation
train_ind<-sample(nrow(crime_data_scaled), size=floor(nrow(crime_data_scaled) * .7))
xtrain<-crime_data_scaled[train_ind,1:15]
ytrain<-crime_data_scaled[train_ind,16]
xtest<-crime_data_scaled[-train_ind,1:15]
ytest<-crime_data_scaled[-train_ind,16]
#create lasso model alpha=1
model_lasso<-glmnet(x=xvals,y=yvals,alpha = 1)
par(mfrow=c(1,2))
plot(model_lasso,xvar = "lambda")
plot(model_lasso, xvar = "norm")
#cross validation of lasso
lasso_cv<-cv.glmnet(xtrain, ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get MSE for stepwise regression
mse_sw<-mean(model_stepwise$residuals^2)
#get x and y values for glmnet
xvals<-as.matrix(crime_data_scaled[,-16])
yvals<-as.matrix(crime_data_scaled[,16])
#get training and test set for cross validation
train_ind<-sample(nrow(crime_data_scaled), size=floor(nrow(crime_data_scaled) * .7))
xtrain<-crime_data_scaled[train_ind,1:15]
ytrain<-crime_data_scaled[train_ind,16]
xtest<-crime_data_scaled[-train_ind,1:15]
ytest<-crime_data_scaled[-train_ind,16]
#create lasso model alpha=1
model_lasso<-glmnet(x=xvals,y=yvals,alpha = 1)
par(mfrow=c(1,2))
plot(model_lasso,xvar = "lambda")
plot(model_lasso, xvar = "norm")
#cross validation of lasso
lasso_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
plot(lasso_cv)
best_lambda <- lasso_cv$lambda.min
coef(lasso_cv, s = "lambda.min")
# Check MSE
yhat <- predict(lasso_cv, s=lasso_cv$lambda.min, newx=xtest)
# Check MSE
yhat <- predict(lasso_cv, s=lasso_cv$lambda.min, newx=as.matrix(xtest))
mse_lasso <- mean((ytest - yhat)^2)
#same process using Elastic Net a=0 is ridge regression.
model_en<-glmnet(x=xvals,y=yvals,alpha = 0.5)
par(mfrow=c(1,2))
plot(model_en,xvar = "lambda")
plot(model_en, xvar = "norm")
#cross validation of lasso
en_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#plot our MSE vs lambda
plot(en_cv)
best_lambda <- en_cv$lambda.min
coef(en_cv, s = "lambda.min")
# Check MSE
yhat_en <- predict(en_cv, s=en_cv$lambda.min, newx=as.matrix(xtest))
mse_en <- mean((ytest - yhat_en)^2)
RSS <- c(crossprod(model_stepwise$residuals))
MSE <- RSS / length(model_stepwise$residuals)
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get MSE for stepwise regression
mse_sw<-mean(model_stepwise$residuals^2)
#get x and y values for glmnet
xvals<-as.matrix(crime_data_scaled[,-16])
yvals<-as.matrix(crime_data_scaled[,16])
#get training and test set for cross validation
train_ind<-sample(nrow(crime_data_scaled), size=floor(nrow(crime_data_scaled) * .7))
xtrain<-crime_data_scaled[train_ind,1:15]
ytrain<-crime_data_scaled[train_ind,16]
xtest<-crime_data_scaled[-train_ind,1:15]
ytest<-crime_data_scaled[-train_ind,16]
#create lasso model alpha=1
model_lasso<-glmnet(x=xvals,y=yvals,alpha = 1)
par(mfrow=c(1,2))
plot(model_lasso,xvar = "lambda")
plot(model_lasso, xvar = "norm")
#cross validation of lasso
lasso_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#plot our MSE vs lambda
plot(lasso_cv)
best_lambda <- lasso_cv$lambda.min
coef(lasso_cv, s = "lambda.min")
# Check MSE
yhat <- predict(lasso_cv, s=lasso_cv$lambda.min, newx=as.matrix(xtest))
mse_lasso <- mean((ytest - yhat)^2)
#same process using Elastic Net a=0 is ridge regression.
model_en<-glmnet(x=xvals,y=yvals,alpha = 0)
par(mfrow=c(1,2))
plot(model_en,xvar = "lambda")
plot(model_en, xvar = "norm")
#cross validation of lasso
en_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#plot our MSE vs lambda
plot(en_cv)
best_lambda_en <- en_cv$lambda.min
coef(en_cv, s = "lambda.min")
# Check MSE
yhat_en <- predict(en_cv, s=en_cv$lambda.min, newx=as.matrix(xtest))
mse_en <- mean((ytest - yhat_en)^2)
summar(en_cv)
summary(en_cv)
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
crime_data[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get MSE for stepwise regression
mse_sw<-mean(model_stepwise$residuals^2)
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data_scaled)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get MSE for stepwise regression
mse_sw<-mean(model_stepwise$residuals^2)
rm(list=ls())
set.seed(1)
library(MASS)
library(glmnet)
#read in data, and create a second data set that is scla
crime_data<-read.table("data/us_crime_data.txt", header = TRUE)
crime_data_scaled<-crime_data
#check which columns are binary
binary<-apply(crime_data_scaled,2,function(x){all(x %in% 0:1)})
binary
#scale all columns except for binary
crime_data_scaled[!binary] = scale(crime_data_scaled[!binary])
#create initial model with all unscaled data
model<-lm(Crime~., data=crime_data)
#create model using stepwise regression
model_stepwise<-stepAIC(model, direction = "both", trace = F)
model_stepwise$anova
summary(model_stepwise)
#get x and y values for glmnet
xvals<-as.matrix(crime_data_scaled[,-16])
yvals<-as.matrix(crime_data_scaled[,16])
#get training and test set for cross validation
train_ind<-sample(nrow(crime_data_scaled), size=floor(nrow(crime_data_scaled) * .7))
xtrain<-crime_data_scaled[train_ind,1:15]
ytrain<-crime_data_scaled[train_ind,16]
xtest<-crime_data_scaled[-train_ind,1:15]
ytest<-crime_data_scaled[-train_ind,16]
#create lasso model alpha=1
model_lasso<-glmnet(x=xvals,y=yvals,alpha = 1)
par(mfrow=c(1,2))
plot(model_lasso,xvar = "lambda")
plot(model_lasso, xvar = "norm")
#cross validation of lasso
lasso_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#plot our MSE vs lambda
plot(lasso_cv)
best_lambda <- lasso_cv$lambda.min
coef(lasso_cv, s = "lambda.min")
# Check MSE
yhat <- predict(lasso_cv, s=lasso_cv$lambda.min, newx=as.matrix(xtest))
mse_lasso <- mean((ytest - yhat)^2)
cat("MSE for LASSO using cross validation: ", mse_lasso, "\n")
#same process using Elastic Net a=0 is ridge regression.
model_en<-glmnet(x=xvals,y=yvals,alpha = 0)
par(mfrow=c(1,2))
plot(model_en,xvar = "lambda")
plot(model_en, xvar = "norm")
#cross validation of lasso
en_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#plot our MSE vs lambda
plot(en_cv)
best_lambda_en <- en_cv$lambda.min
coef(en_cv, s = "lambda.min")
# Check MSE
yhat_en <- predict(en_cv, s=en_cv$lambda.min, newx=as.matrix(xtest))
mse_en <- mean((ytest - yhat_en)^2)
cat("MSE for Elastic Net using cross validation: ", mse_lasso, "\n")
#same process using Elastic Net a=0 is ridge regression.
model_en<-glmnet(x=xvals,y=yvals,alpha = 0)
par(mfrow=c(1,2))
plot(model_en,xvar = "lambda")
plot(model_en, xvar = "norm")
#cross validation of lasso
en_cv<-cv.glmnet(as.matrix(xtrain), ytrain,alpha=1, nfolds = 5,
type.measure = "mse",family = "gaussian", standardize = FALSE )
#plot our MSE vs lambda
plot(en_cv)
best_lambda_en <- en_cv$lambda.min
coef(en_cv, s = "lambda.min")
# Check MSE
yhat_en <- predict(en_cv, s=en_cv$lambda.min, newx=as.matrix(xtest))
mse_en <- mean((ytest - yhat_en)^2)
cat("\nMSE for Elastic Net using cross validation: ", mse_en, "\n")
