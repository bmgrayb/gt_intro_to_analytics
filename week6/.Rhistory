install install.packages("rvest")
install.packages("rvest")
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_nodes("#titleCast .itemprop span") %>%
html_text()
lego_movie %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(rvest)
WSwinners <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
head(WSwinners)
library(rvest)
library(rvest)
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
head(WSwinners)
WSwinners<-WSwinners[[1]]
print(WSwinners)
head(WSwinners)
WSwinners<-WSwinners[-1,]
head(WSwinners)
print(WSwinners)
###
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[-1,]
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
head(WSwinners)
WSwinners<-WSwinners[-1,]
WSwinners<-WSwinners[[-1,]]
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
WSwinners<-WSwinners[2:3]
head(WSwinners)
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
library(rvest)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
install.packages("plyr")
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
count(WSwinners,"WINNER")
count(WSwinners,"X2")
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-2,]
head(WSwinners)
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
head(WSwinners)
WSwinners<-WSwinners[-1,]
head(WSwinners)
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-2,]
head(WSwinners)
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,] %>%WSwinners[-1,]
library(rvest)
library(plyr)
source <- read_html("http://www.espn.com/mlb/worldseries/history/winners")
WSwinners<-source %>%
html_nodes(xpath='//*[@id="my-players-table"]/div[1]/div/table') %>%
html_table()
WSwinners<-WSwinners[[1]]
WSwinners<-WSwinners[-1,]
WSwinners<-WSwinners[-1,]
head(WSwinners)
clear
View(WSwinners)
View(WSwinners)
rm(list=ls())
system("python schoolwork/IntroToAnalytics/week6/airport_security.py")
setwd("~/schoolwork/IntroToAnalytics/week6")
system("python airport_security.py")
Sys.setenv(PATH = paste("/Users/brando/anaconda3/bin", Sys.getenv("PATH"), sep=":"))
system("python airport_security.py")
system("python airport_security.py")
system("python airport_security.py")
system("python airport_security.py")
system("python airport_security.py")
system("python airport_security.py")
install.packages("plotly")
rm(list=ls())
set.seed(1)
library(ggplot2)
library(plotly)
#read in data
security_data<-read.table("data/airport_security_data.csv", header = FALSE, sep = ",")
colnames(security_data)<-c("Checkers","Scanners", "MeanWaitTime", "MedianWaitTime","Throughput")
ggplot(security_data, aes(Scanners, Checkers)) +
geom_point(aes(colour = cut(MeanWaitTime, c(-Inf, 15,16, Inf)))) +
scale_color_manual(name = "Mean Wait Time",
values = c("(-Inf,15]" = "red","(16, Inf]" = "black"),
labels = c("<= 15", "> 15"))
ggplot(security_data, aes(Scanners, Checkers)) +
geom_point(aes(colour = cut(MeanWaitTime, c(-Inf, 15,16, Inf)))) +
scale_color_manual(name = "Mean Wait Time",
values = c("(-Inf,15]" = "red","(16, Inf]" = "black"),
labels = c("<= 15 min", "> 15 min"))
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~MeanWaitTime, colorscale="Greys", type = "heatmap")
install.packages("shiny")
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~MeanWaitTime, colorscale="Greys", type = "heatmap")
install.packages("promises")
install.packages("promises")
install.packages("shiny")
install.packages("shiny")
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~MeanWaitTime, colorscale="Greys", type = "heatmap")
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~MedianWaitTime, colorscale="Greys", type = "heatmap")
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~Throughput, colorscale="Greys", type = "heatmap")
ggplot(security_data, aes(MeanWaitTime, Throughput)) +
geom_point()
ggplot(security_data, aes(MeanWaitTime, Throughput)) +
geom_point() + geom_line()
ggplot(security_data, aes(MeanWaitTime, Throughput)) +
geom_point()
ggplot(security_data, aes(MedianWaitTime, Throughput)) +
geom_point()
#
ggplot(security_data, aes(Throughput,MeanWaitTime,)) +
geom_point()
#
ggplot(security_data, aes(Throughput,Checkers)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
set.seed(1)
library(ggplot2)
library(plotly)
#read in data
security_data<-read.table("data/airport_security_data.csv", header = FALSE, sep = ",")
colnames(security_data)<-c("Checkers","Scanners", "MeanWaitTime", "MedianWaitTime","Throughput")
#plot number of scanners vs checkers and whether it was under 15 mins
ggplot(security_data, aes(Scanners, Checkers)) +
geom_point(aes(colour = cut(MeanWaitTime, c(-Inf, 15,16, Inf)))) +
scale_color_manual(name = "Mean Wait Time",
values = c("(-Inf,15]" = "red","(16, Inf]" = "black"),
labels = c("<= 15 min", "> 15 min"))
#heat maps
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~MeanWaitTime, colorscale="Greys", type = "heatmap")
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~MedianWaitTime, colorscale="Greys", type = "heatmap")
plot_ly(security_data, x = ~Checkers, y = ~Scanners, z = ~Throughput, colorscale="Greys", type = "heatmap")
install.packages("reticulate")
install.packages("webshot")
webshot::install_phantomjs()
